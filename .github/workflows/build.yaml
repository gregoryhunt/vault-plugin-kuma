name: Go

on: [push]

jobs:

  build_plugin:
    name: Build Plugin
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2

      with:
        go-version: 1.18

    - name: Build
      run: go build -v ./...

  unit_tests:
    name: Test and coverage
    runs-on: ubuntu-latest
    needs:
      - build_plugin
    steps:

    - uses: actions/checkout@v2
  
    - uses: actions/setup-go@v2
      with:
        go-version: '1.18'
    
    - name: Run coverage
      run: go test -race -coverprofile=coverage.out -covermode=atomic
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  functional_tests:
    name: Run Functional Tests
    runs-on: ubuntu-latest
    needs:
      - build_plugin
    strategy:
      matrix:
        tags:
          - "@kuma_roles"
          - "@kuma_dataplane_token"
          - "@kuma_dataplane_token_globbed"
          - "@kuma_user_token"
    steps:

    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Setup Functional Tests
      run: |
        curl https://shipyard.run/install | bash

    - name: Run Functional Tests
      run: |
        make build
        cd functional_tests && go run . --godog.tags="${{ matrix.tags }}"

  create_artifacts:
    name: Create and upload artifacts
    runs-on: ubuntu-latest
    needs:
      - functional_tests
    steps:
    
      - uses: actions/checkout@v2
    
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      
      - name: Build multiple versions
        run: make build_all

      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_SIGNING_KEY }}
          passphrase: ${{ secrets.GPG_SIGNING_PASSWORD }}
      
      - name: Zip Artifacts
        run: |
          zip bin/vault-plugin-kuma-darwin-arm64.zip bin/vault-plugin-kuma-darwin-arm64
          zip bin/vault-plugin-kuma-darwin-amd64.zip bin/vault-plugin-kuma-darwin-amd64
          zip bin/vault-plugin-kuma-linux-arm64.zip bin/vault-plugin-kuma-linux-arm64
          zip bin/vault-plugin-kuma-linux-amd64.zip bin/vault-plugin-kuma-linux-amd64
          zip bin/vault-plugin-kuma-windows-amd64.zip bin/vault-plugin-kuma-windows-amd64.exe
    
      - name: Generate checksums
        run: |
          sha256sum bin/vault-plugin-kuma-darwin-arm64.zip >> bin/vault-plugin-kuma_SHA256SUMS
          sha256sum bin/vault-plugin-kuma-darwin-amd64.zip >> bin/vault-plugin-kuma_SHA256SUMS
          sha256sum bin/vault-plugin-kuma-linux-arm64.zip >> bin/vault-plugin-kuma_SHA256SUMS
          sha256sum bin/vault-plugin-kuma-linux-amd64.zip >> bin/vault-plugin-kuma_SHA256SUMS
          sha256sum bin/vault-plugin-kuma-windows-amd64.zip >> bin/vault-plugin-kuma_SHA256SUMS
      
      - name: Sign the checksum file
        run: |
          gpg --output ./bin/vault-plugin-kuma_SHA256SUMS.sig --detach-sig ./bin/vault-plugin-kuma_SHA256SUMS

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: plugin_artifacts
          path: |
            bin/vault-plugin-kuma-darwin-arm64
            bin/vault-plugin-kuma-darwin-amd64
            bin/vault-plugin-kuma-linux-amd64
            bin/vault-plugin-kuma-linux-arm64
            bin/vault-plugin-kuma-windows-amd64.exe

  check_labels:
    name: Check PR labels
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v2

      - id: check_pr_labels
        name: Check PR labels
        uses: nicholasjackson/check-pr-labels-on-push-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labels: '["patch", "minor", "major"]'
          match-any: 'true'
    outputs:
      pr_labels_set: ${{ steps.check_pr_labels.outputs.result }}
      pr_first_label: ${{ fromJson(steps.check_pr_labels.outputs.labels)[0] }}

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - check_labels
      - create_artifacts
    if: ${{ needs.check_labels.outputs.pr_labels_set == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Download-Binaries
        uses: actions/download-artifact@v2
        with:
          name: plugin_artifacts
          path: ./artifacts
      
      - id: check_pr_labels
        uses: nicholasjackson/check-pr-labels-on-push-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labels: '["patch", "minor", "major"]'
          match-any: 'true'

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true
          default_bump: ${{ fromJson(steps.check_pr_labels.outputs.labels)[0] }}
    
      - name: Zip Artifacts
        run: |
          tar -czf ./artifacts/vault-plugin-kuma-darwin-arm64-${{ steps.tag_version.outputs.new_version }}.tgz ./artifacts/vault-plugin-kuma-darwin-arm64
          tar -czf ./artifacts/vault-plugin-kuma-darwin-amd64-${{ steps.tag_version.outputs.new_version }}.tgz ./artifacts/vault-plugin-kuma-darwin-amd64
          tar -czf ./artifacts/vault-plugin-kuma-linux-arm64-${{ steps.tag_version.outputs.new_version }}.tgz ./artifacts/vault-plugin-kuma-linux-arm64
          tar -czf ./artifacts/vault-plugin-kuma-linux-amd64-${{ steps.tag_version.outputs.new_version }}.tgz ./artifacts/vault-plugin-kuma-linux-amd64
          zip ./artifacts/vault-plugin-kuma-windows-amd64-${{ steps.tag_version.outputs.new_version }}.zip ./artifacts/vault-plugin-kuma-windows-amd64.exe

      - name: Bump version and push tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: ${{ fromJson(steps.check_pr_labels.outputs.labels)[0] }}

            #- name: Release
            #  uses: softprops/action-gh-release@v1
            #  with:
            #    tag_name: ${{ steps.tag_version.outputs.new_tag }}
            #    token: ${{ secrets.GH_TOKEN }}
            #    files: |
            #      ./consul-release-controller-${{ steps.tag_version.outputs.new_version }}.tgz
